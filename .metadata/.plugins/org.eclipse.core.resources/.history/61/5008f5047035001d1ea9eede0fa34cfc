package servlets;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import models.Book;
import models.UserType;
import repository.IBookRepository;
import repository.BookRepository;

@MultipartConfig
@WebServlet("/books/edit")
public class BookEditServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		IBookRepository repository = new BookRepository();
		req.setCharacterEncoding("utf-8");
		String errorMessage = "";
		
		HttpSession session = req.getSession(false);
        
        try {
        	Integer type = (Integer) session.getAttribute("type");
            Boolean login = (Boolean) session.getAttribute("login");
            
            if (type == UserType.ADMIN.toInteger() && login == true) {
            	if (req.getParameter("id") != null) {
        			Integer id = Integer.valueOf(req.getParameter("id"));
        			Book book = repository.find(id);

        			req.setAttribute("book", book);
        			RequestDispatcher dispatcher = req.getRequestDispatcher("/edit-book.jsp");
        			dispatcher.forward(req, resp);
        		} else {
        			Book book = new Book();

                    book.setId(Integer.valueOf(req.getParameter("field-id")));
                    book.setName(req.getParameter("field-name"));
                    // field-date, string to LocalDate 'dd/MM/yyyy'
                    book.setDate(java.time.LocalDate.parse(req.getParameter("field-date"), java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy")));
        			book.setAuthor(req.getParameter("field-author"));
                    book.setStatus(Integer.valueOf(req.getParameter("field-status")));
                    
                    // aqui add validação

                    repository.update(book);

        			RequestDispatcher dispatcher = req.getRequestDispatcher("/books");
        			dispatcher.forward(req, resp);
        		}
            } else {
            	throw new Exception("Ops! Usuário sem permissão.");
            }
        } catch (Exception e){
        	System.out.println(e.getMessage());
        	errorMessage = e.getMessage();
        }
        
        req.setAttribute("errorMessage", errorMessage);
    	RequestDispatcher dispatcher = req.getRequestDispatcher("../blib.jsp");
        dispatcher.forward(req, resp);
	}
}
